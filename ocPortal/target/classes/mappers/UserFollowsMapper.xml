<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.online.college.dao.UserFollowsMapper">
    <resultMap id="BaseResultMap" type="com.online.college.pojo.UserFollows">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="user_id" property="userId" jdbcType="INTEGER"/>
        <result column="follow_id" property="followId" jdbcType="INTEGER"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="create_user" property="createUser" jdbcType="VARCHAR"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
        <result column="update_user" property="updateUser" jdbcType="VARCHAR"/>
        <result column="del" property="del" jdbcType="BIT"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, user_id, follow_id, create_time, create_user, update_time, update_user, del
  </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from t_user_follows
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from t_user_follows
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <insert id="insert" parameterType="com.online.college.pojo.UserFollows">
    insert into t_user_follows (id, user_id, follow_id, 
      create_time, create_user, update_time, 
      update_user, del)
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{followId,jdbcType=INTEGER}, 
      now(), #{createUser,jdbcType=VARCHAR},now(), 
      #{updateUser,jdbcType=VARCHAR}, #{del,jdbcType=BIT})
  </insert>
    <insert id="insertSelective" parameterType="com.online.college.pojo.UserFollows">
        insert into t_user_follows
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="userId != null">
                user_id,
            </if>
            <if test="followId != null">
                follow_id,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="createUser != null">
                create_user,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="updateUser != null">
                update_user,
            </if>
            <if test="del != null">
                del,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="userId != null">
                #{userId,jdbcType=INTEGER},
            </if>
            <if test="followId != null">
                #{followId,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                now(),
            </if>
            <if test="createUser != null">
                #{createUser,jdbcType=VARCHAR},
            </if>
            <if test="updateTime != null">
                now(),
            </if>
            <if test="updateUser != null">
                #{updateUser,jdbcType=VARCHAR},
            </if>
            <if test="del != null">
                #{del,jdbcType=BIT},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.online.college.pojo.UserFollows">
        update t_user_follows
        <set>
            <if test="userId != null">
                user_id = #{userId,jdbcType=INTEGER},
            </if>
            <if test="followId != null">
                follow_id = #{followId,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createUser != null">
                create_user = #{createUser,jdbcType=VARCHAR},
            </if>
            <if test="updateTime != null">
                update_time =now(),
            </if>
            <if test="updateUser != null">
                update_user = #{updateUser,jdbcType=VARCHAR},
            </if>
            <if test="del != null">
                del = #{del,jdbcType=BIT},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.online.college.pojo.UserFollows">
    update t_user_follows
    set user_id = #{userId,jdbcType=INTEGER},
      follow_id = #{followId,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      create_user = #{createUser,jdbcType=VARCHAR},
      update_time =now(),
      update_user = #{updateUser,jdbcType=VARCHAR},
      del = #{del,jdbcType=BIT}
    where id = #{id,jdbcType=INTEGER}
  </update>
    <select id="queryALl" parameterType="map" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM t_user_follows
        <where>
            <if test="userId != null">
                user_id = #{userId}
            </if>
            <if test="followId != null">
                AND follow_id = #{followId}
            </if>
        </where>
    </select>
    <select id="getUserFollowList" parameterType="int" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM t_user_follows
        WHERE user_id = #{userId}
    </select>

    <select id="queryFollowStudyRecord" parameterType="integer"
            resultType="com.online.college.pojo.UserFollowStudyRecord">
      SELECT
  cs.course_id,
  cs.section_id,
  f.follow_id,
  c.name AS courseName,
  s.name AS sectionName,
  u.username,
  u.header,
  cs.create_time
FROM
  t_user_follows f, t_user_course_section cs, t_course c, t_course_section s, t_auth_user u
WHERE f.user_id = #{userId}
      AND f.follow_id = cs.user_id
      AND f.del = 0
      AND f.follow_id = u.id
      AND cs.course_id = c.id
      AND cs.section_id = s.id
ORDER BY cs.id DESC

    </select>

    <select id="getFollowStudyRecordCount" parameterType="integer" resultType="int">
        SELECT COUNT(cs.id)
		FROM
		t_user_follows f ,t_user_course_section cs
		WHERE f.user_id = #{userId}
		AND f.follow_id = cs.user_id
		AND f.del = 0
    </select>
</mapper>